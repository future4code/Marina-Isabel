{"version":3,"sources":["logo.svg","Components/BoredAPI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyleActivity","styled","div","Title","h2","ImagemIlustatriva","img","Lista","BoredAPI","props","handleChangeParticipants","event","newParticipantsCount","target","value","setState","numberOfParticipants","getActivity","a","axios","get","state","response","currentActivity","data","undefined","src","type","this","onChange","onClick","activity","participants","accessibility","price","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,u0BCK3C,IAAMC,EAAgBC,IAAOC,IAAV,KASbC,EAAQF,IAAOG,GAAV,KAKLC,EAAoBJ,IAAOK,IAAV,KAKjBC,EAAQN,IAAOC,IAAV,KAsDIM,E,YA9CX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAOVC,yBAA2B,SAACC,GACxB,IAAMC,EAAsBD,EAAME,OAAOC,MACzC,EAAKC,SAAS,CAAEC,qBAAsBJ,KAVxB,EAalBK,YAbkB,sBAaJ,4BAAAC,EAAA,sEACaC,IAAMC,IAAN,4DAA+D,EAAKC,MAAML,uBADvF,OACJM,EADI,OAGV,EAAKP,SAAS,CAAEQ,gBAAkBD,EAASE,OAHjC,2CAXV,EAAKH,MAAQ,CACTE,qBAAiBE,EACjBT,qBAAsB,GAJZ,E,sEAoBd,OACI,kBAAChB,EAAD,KACI,kBAACK,EAAD,CAAmBqB,IAAI,0IACvB,kBAACvB,EAAD,yCAEA,2BAAOwB,KAAM,SAASb,MAAOc,KAAKP,MAAML,qBAAsBa,SAAUD,KAAKlB,2BAC7E,4BAAQoB,QAASF,KAAKX,aAAtB,wBACEW,KAAKP,MAAME,iBACR,kBAAChB,EAAD,KACI,yCAAeqB,KAAKP,MAAME,gBAAgBQ,UAC1C,6CAAmBH,KAAKP,MAAME,gBAAgBS,cAC9C,8CAAoBJ,KAAKP,MAAME,gBAAgBU,eAC/C,oCAAUL,KAAKP,MAAME,gBAAgBI,MACrC,wCAAWC,KAAKP,MAAME,gBAAgBW,a,GAlCxCC,IAAMC,WClBdC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14ad6e1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport axios from 'axios'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst StyleActivity = styled.div`\r\n    border: 1px solid black;\r\n    border-radius: 40px;\r\n    width: 92vw;\r\n    height: 80vh;\r\n    margin: 50px;\r\n    text-align:center;\r\n    background-color: #FF6347;\r\n`\r\nconst Title = styled.h2`\r\n    font-family: cursive;\r\n    color: white;\r\n`\r\n\r\nconst ImagemIlustatriva = styled.img`\r\n    width: 40vw;\r\n    height:30vh;\r\n    border-radius:70px;\r\n`\r\nconst Lista = styled.div`\r\n    font-family: cursive;\r\n    color: white;\r\n    font-size: 17px;\r\n`\r\n\r\n\r\nclass BoredAPI extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentActivity: undefined, \r\n            numberOfParticipants: 1,\r\n        }\r\n    }\r\n\r\n    handleChangeParticipants = (event) => {\r\n        const newParticipantsCount= event.target.value;\r\n        this.setState({ numberOfParticipants :newParticipantsCount})\r\n    }\r\n\r\n    getActivity = async () => {\r\n        const response = await axios.get(`http://www.boredapi.com/api/activity?participants=${this.state.numberOfParticipants}`);\r\n\r\n        this.setState({ currentActivity : response.data});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <StyleActivity>\r\n                <ImagemIlustatriva src=\"https://images.unsplash.com/photo-1500995617113-cf789362a3e1?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80\"/>\r\n                <Title>Atividades para agitar o seu dia</Title>\r\n            \r\n                <input type =\"number\" value={this.state.numberOfParticipants} onChange={this.handleChangeParticipants}/>\r\n                <button onClick={this.getActivity}>Próxima Atividade</button>\r\n                { this.state.currentActivity &&\r\n                     <Lista>\r\n                         <p>Atividade: {this.state.currentActivity.activity}</p>\r\n                         <p>Participantes: {this.state.currentActivity.participants}</p>\r\n                         <p>Acessibilidade: {this.state.currentActivity.accessibility}</p>\r\n                         <p>Tipo: {this.state.currentActivity.type}</p>\r\n                         <p>Preço: {this.state.currentActivity.price}</p>\r\n                     </Lista>\r\n                }\r\n            </StyleActivity>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default BoredAPI ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BoredAPI from './Components/BoredAPI';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoredAPI/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}